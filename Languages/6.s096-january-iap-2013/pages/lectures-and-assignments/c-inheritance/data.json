
{
  "title":"C++ Inheritance",
  "content":" Lecture Notes Lecture 6: C++ Inheritance (PDF)\nLab Exercises Take a look at this example code:\n#include \u0026lt;stdio.h\u0026gt; class Shape { public: virtual ~Shape(); virtual void draw() = 0; }; class Circle : public Shape { public: virtual ~Circle(); virtual void draw(); }; Shape::~Shape() { printf(\u0026#34;shape destructor\\n\u0026#34;); } // void Shape::draw() { //\tprintf(\u0026#34;Shape::draw\\n\u0026#34;); // } Circle::~Circle() { printf(\u0026#34;circle destructor\\n\u0026#34;); } void Circle::draw() { printf(\u0026#34;Circle::draw\\n\u0026#34;); } int main() { Shape *shape = new Circle; shape-\u0026gt;draw(); delete shape; return 0; } Put it in a file named lab6.cpp and then compile it like this:\n$ g++ -Wall lab6.cpp -o lab6 $ ./lab6 Circle::draw circle destructor shape destructor Verify your understanding of how the virtual keyword and method overriding work by performing a few experiments:\nRemove the virtual keyword from each location individually, recompiling and running each time to see how the output changes. Can you predict what will and will not work? Try making Shape::draw non-pure by removing = 0 from its declaration. Try changing shape (in main()) from a pointer to a stack-allocated variable. Assignment 6 rps (CPP)\nIn the file rps.cpp, implement a class called Tool. It should have an int field called strength and a char field called type. You may make them either private or protected. The Tool class should also contain the function void setStrength(int), which sets the strength for the Tool.\nCreate 3 more classes called Rock, Paper, and Scissors, which inherit from Tool. Each of these classes will need a constructor which will take in an int that is used to initialize the strength field. The constructor should also initialize the type field using 'r' for Rock, 'p' for Paper, and 's' for Scissors.\nThese classes will also need a public function bool fight(Tool) that compares their strengths in the following way:\nRock\u0026rsquo;s strength is doubled (temporarily) when fighting scissors, but halved (temporarily) when fighting paper. In the same way, paper has the advantage against rock, and scissors against paper. The strength field shouldn\u0026rsquo;t change in the function, which returns true if the original class wins in strength and false otherwise. You may also include any extra auxiliary functions and/or fields in any of these classes. Run the program without changing the main function, and verify that the results are correct.\n$ g++ -Wall rps.cpp -o rps $ ./rps \u0026lt;your test output\u0026gt; Solutions Solutions are not available for this assignment.\n"}


